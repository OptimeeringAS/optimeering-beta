name: Build
on:
    pull_request:
    push:
        branches: main
jobs:
  build:
    runs-on: ubuntu-latest
    name: Perform CI Checks
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v4
        with:
          python-version: 3.11
      - uses: pantsbuild/actions/init-pants@v5-scie-pants
        # This action bootstraps pants and manages 2-3 GHA caches.
        # See: github.com/pantsbuild/actions/tree/main/init-pants/
        with:
          # v0 makes it easy to bust the cache if needed
          # just increase the integer to start with a fresh cache
          gha-cache-key: v0
          # The Python backend uses named_caches for Pip/PEX state,
          # so it is appropriate to invalidate on lockfile changes.
          named-caches-hash: ${{ hashFiles('python-default.lock') }}
          # If you're not using a fine-grained remote caching service (see https://www.pantsbuild.org/docs/remote-caching),
          # then you may also want to preserve the local Pants cache (lmdb_store). However this must invalidate for
          # changes to any file that can affect the build, so may not be practical in larger repos.
          # A remote cache service integrates with Pants's fine-grained invalidation and avoids these problems.
          # cache-lmdb-store: 'true'  # defaults to 'false'
          # Note that named_caches and lmdb_store falls back to partial restore keys which
          # may give a useful partial result that will save time over completely clean state,
          # but will cause the cache entry to grow without bound over time.
          # See https://pants.readme.io/docs/using-pants-in-ci for tips on how to periodically clean it up.
          # Alternatively you change gha-cache-key to ignore old caches.
      - name: Check BUILD files
        run: |
            pants tailor --check update-build-files --check --changed-since=origin/main
      - name: Lint and typecheck
        run: |
            pants lint --changed-since=origin/main
      - name: Test
        run: |
            pants test ::
      - name: Package
        run: |
          pants package ::
      - name: Upload SDK
        if: contains(github.ref, 'main')
        uses: actions/upload-artifact@v4
        with:
          name: optimeering-beta-sdk
          path: dist/
  publish:
    if: contains(github.ref, 'main')
    runs-on: ubuntu-latest
    environment: main
    name: Publish SDK and Docs
    needs:
      - build
    permissions:
      id-token: write

    steps:
      - uses: actions/checkout@v4
      - name: Retrieve publish SDK
        uses: actions/download-artifact@v4
        with:
          name: optimeering-beta-sdk
          path: dist/
      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/optimeering-beta/
          skip-existing: true
      - name: Setup azcopy
        run: |
          curl -sSL -O https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          rm packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install azcopy
  
      - name: Copy SDK Docs
        run: |
          VERSION=$(cat optimeering_beta/__init__.py  | grep -E '^__version__ = ".*"$' | cut -d '"' -f 2 | cut -d "." -f 1 | xargs -I {} echo v{})
  
          azcopy copy "docs/site" "https://optimeeringdocs.file.core.windows.net/betapythonsdk/latest${{ secrets.DOCS_SAS_TOKEN }}" --recursive --as-subdir=false
          azcopy copy "docs/site" "https://optimeeringdocs.file.core.windows.net/betapythonsdk/$VERSION${{ secrets.DOCS_SAS_TOKEN }}" --recursive --as-subdir=false